{
  "name": "thisable",
  "version": "1.0.1",
  "description": "Promises with context.",
  "keywords": [
    "thisable",
    "thenable",
    "promise",
    "then",
    "this",
    "context"
  ],
  "license": "MIT",
  "homepage": "https://github.com/yneves/thisable",
  "author": {
    "name": "Yuri Neves Silveira",
    "email": "npm@yneves.com",
    "url": "http://yneves.com/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/yneves/thisable.git"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "devDependencies": {
    "mocha": ">=1.0.0",
    "promises-aplus-tests": "^2.0.4"
  },
  "main": "thisable.js",
  "readme": "Thisable\r\n========\r\n\r\nThis is just [Thenable](https://github.com/rse/thenable) with the possibility of binding context to callbacks. Yes, it breaks the `Promises/A+ 1.1.1 Thenable` specification, although it passes all [promises-aplus-tests](https://github.com/promises-aplus/promises-tests).\r\n\r\n## Installation\r\n\r\n```\r\nnpm install thisable\r\n```\r\n\r\n## Usage\r\n\r\nThe only difference between `Thenable` and `Thisable` is the `.bind` method which sets the `this` variable to be used within callbacks. If `.bind` is not called, it will behave just like the specification.\r\n\r\n```js\r\nvar Thisable = require(\"thisable\");\r\n\r\nvar promise = new Thisable();\r\n\r\nvar object = { prop: \"value\" };\r\n\r\npromise.bind(object);\r\n\r\npromise.then(function(value) {\r\n\t// this strictEqual object\r\n});\r\n```\r\n\r\nWhen chaining multiple promises, the context of the top promise is passed along to all the chained ones. Even if it is defined in some of the returned promises.\r\n\r\n```js\r\nvar Thisable = require(\"thisable\");\r\n\r\nvar a = new Thisable();\r\nvar b = new Thisable();\r\nvar c = new Thisable();\r\nvar d = new Thisable();\r\n\r\nvar object = {a:1,b:2,c:3};\r\nvar otherObject = {d:4,e:5,f:6};\r\n\r\na.bind(object);\r\n\r\na.then(function(aval) {\r\n\treturn b.bind(otherObject).then(function(bval) {\r\n\t\t// this strictEqual otherObject\r\n\t\treturn aval + bval;\r\n\t});\r\n}).then(function(abval) {\r\n\treturn c.then(function(cval) {\r\n\t\treturn abval + cval;\r\n\t});\r\n}).then(function(abcval) {\r\n\treturn d.then(function(dval) {\r\n\t\treturn abcval + dval;\r\n\t});\r\n}).then(function(abcdval) {\r\n\t// abcdval equal 10\r\n\t// this strictEqual object\r\n});\r\n\r\nsetTimeout(function() { a.fulfill(1) },100);\r\nsetTimeout(function() { b.fulfill(2) },200);\r\nsetTimeout(function() { c.fulfill(3) },300);\r\nsetTimeout(function() { d.fulfill(4) },400);\r\n```\r\n\r\n## License\r\n\r\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/yneves/thisable/issues"
  },
  "_id": "thisable@1.0.1",
  "_from": "thisable@"
}
